library(shiny)
?tabPanel
get_error = function(beta) {
beta_var = beta^2 #sq. beta to get % var accounted for
remain_var = 1 - beta_var #subtract from 1 to get % remain var
remain_beta = sqrt(remain_var) #sqrt to get the beta for the remainder
return(remain_beta)
}
get_error(.7)
get_error(.5)
set.seed(1)
n = 1e4
pred_con = rnorm(n) #normally distributed predictor
rm(n)
library(plyr)
library(ggplot2)
median(1:5)
median(1:5)
median(1:6)
shiny::runApp()
options(error = browser)
shiny::runApp()
ls()
head(pred_con)
shiny::runApp()
ls
ls()
d
n = 1e4
set.seed(1)
d = data.frame(pred_con = rnorm(n))
d$pred_discrete = cut(d$pred_con, quantile(d$pred_con, seq(0, 1, length.out = input$n_groups + 1)), labels = F, include.lowest = T)
option(error = NULL)
options(error = NULL)
shiny::runApp()
rm(d)
rm(n)
rm(pred_con)
shiny::runApp()
View(d)
View(d)
qnorm(2)
pnorm(2)
pnorm(rnorm(5))
sample(0:1, 100, prob = c(.9, .1))
sample(0:1, 100, prob = c(.9, .1), T)
sum(sample(0:1, 100, prob = c(.9, .1), T))
sum(sample(0:1, 100, prob = c(.9, .1), T))
sum(sample(0:1, 100, prob = c(.9, .1), T))
sum(sample(0:1, 100, prob = c(.9, .1), T))
pnorm(2)
pnorm(1)
aaply
mdply(data.frame(mean = 1:5, sd = 1:5), rnorm, n = 2)
mdply(data.frame(mean = seq(0, 1, .1), sd = seq(1, 0, -.1)), sample, x = 0:1, n = 1)
mdply(data.frame(mean = 1:5, sd = 1:5), rnorm, n = 2)
mdply(data.frame(mean = 1:5, sd = 1:5), rnorm, n = 2)
mdply(data.frame(mean = 1:5, sd = 1:5), rnorm, n = 2)
get_prop = function(x) {
return(x, 1 - x)
}
get_prop = function(x) {
return(c(x, 1 - x))
}
get_prop(.2)
get_prop(.8)
?do.call
do.call(sample, args = list(prop = c(.1, .9), x = 0:1, n = 100))
do.call(sample, args = list(prob = c(.1, .9), x = 0:1, n = 100))
do.call(sample, args = list(prob = c(.1, .9), x = 0:1, size = 100, replace = T))
mean(do.call(sample, args = list(prob = c(.1, .9), x = 0:1, size = 100, replace = T)))
mean(do.call(sample, args = list(prob = c(.1, .9), x = 0:1, size = 100, replace = T)))
mean(do.call(sample, args = list(prob = c(.1, .9), x = 0:1, size = 100, replace = T)))
mean(do.call(sample, args = list(prob = c(.1, .9), x = 0:1, size = 100, replace = T)))
do.call(sample, args = list(prob = c(.1, .9), x = 0:1, size = 100, replace = T))
mean(do.call(sample, args = list(prob = c(.1, .9), x = 0:1, size = 100, replace = T)))
do.call(sample, args = list(prob = c(.1, .9), x = 0:1, size = 100, replace = T))
get_converse_prob = function(x) {
return(c(x, 1 - x))
}
rm(get_prop())
rm(get_prop
)
get_converse_prob = function(x) {
return(c(x, 1 - x))
}
get_both_probs = function(x) {
return(c(x, 1 - x))
}
sample(1)
sample(1)
sample(1)
sample(1)
sample(1)
get_both_probs = function(x) {
return(c(x, 1 - x))
}
sample(1)
sample(1, prob = .1)
sample(1, prob = .1)
sample(1, prob = .1)
sample(1)
sample(1, prob = .1)
sample(1)
t = numeric()
t
t[1]
t[1] = 1
t
t[3] = 3
t
get_binary = function(x) {
x_pnorm = pnorm(x + input$thres) #gets the probability of the event using normal distribution
x_binary = numeric()
for (idx in seq_along(x_pnorm)) {
x_binary = sample(x = 0:1, #sample from 0 and 1
size = 1, #get 1 sample
prob = get_both_probs(x_pnorm[idx]) #with these probabilities
)
}
return(x_binary)
}
get_binary(.1)
#returns whether the event ocurred or not for a given x value
get_binary = function(x) {
x_pnorm = pnorm(x) #gets the probability of the event using normal distribution
x_binary = numeric()
for (idx in seq_along(x_pnorm)) {
x_binary = sample(x = 0:1, #sample from 0 and 1
size = 1, #get 1 sample
prob = get_both_probs(x_pnorm[idx]) #with these probabilities
)
}
return(x_binary)
}
get_binary(.1)
get_binary(.1)
get_binary(.1)
get_binary(.1)
get_binary(.1)
get_binary(.1)
get_binary(.1)
get_binary(.1)
get_binary(.1)
get_binary(.1)
#returns whether the event ocurred or not for a given x value
get_binary = function(x) {
x_pnorm = pnorm(x) #gets the probability of the event using normal distribution
x_binary = numeric()
for (idx in seq_along(x_pnorm)) {
x_binary = sample(x = 0:1, #sample from 0 and 1
size = 1, #get 1 sample
prob = get_both_probs(x_pnorm[idx]) #with these probabilities
)
}
return(x_binary)
}
get_binary(.1)
1:0
get_binary = function(x) {
x_pnorm = pnorm(x) #gets the probability of the event using normal distribution
x_binary = numeric()
for (idx in seq_along(x_pnorm)) {
x_binary = sample(x = 1:0, #sample from 0 and 1
size = 1, #get 1 sample
prob = get_both_probs(x_pnorm[idx]) #with these probabilities
)
}
return(x_binary)
}
shiny::runApp()
View(d)
shiny::runApp()
View(d)
View(d)
shiny::runApp()
View(d)
get_binary(seq(0, 1, .1))
get_binary(seq(0, 1, .1))
get_binary(seq(0, 1, .1))
get_binary(seq(0, 1, .1))
View(d)
View(d)
get_binary(seq(0, 1, .1))
get_binary(seq(0, 1, .1))
get_binary(seq(0, 1, .1))
get_binary(seq(0, 1, .1))
get_binary(seq(0, 1, .1))
get_binary(seq(0, 1, .1))
get_binary(seq(0, 1, .1))
shiny::runApp()
View(d)
plot(d$out_con, d$out_binary)
cor(d$out_con, d$out_binary)
input
input$cor
shiny::runApp()
shiny::runApp()
View(d2)
str(d2)
View(d2)
library(reshape)
rm(t)
shiny::runApp()
View(d3)
d2$prop = NULL #remove
d3 = melt(d2)
View(d3)
d3 = melt(d2)
View(d3)
g = ggplot(d2, aes(pred_discrete, value)) + geom_bar(aes(group = variable), stat = "identity", position = "dodge")
shiny::runApp()
shiny::runApp()
View(d3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(d3)
View(d3)
View(d3)
View(d3)
1 / 0
shiny::runApp()
shiny::runApp()
qnorm(.5)
qnorm(.1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
qnorm(0)
qnorm(.5)
shiny::runApp()
shiny::runApp()
qnorm(0)
qnorm(.01)
shiny::runApp()
shiny::runApp()
shiny::runApp()
log(.1)
log(.01)
1/.001
1/.01
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
